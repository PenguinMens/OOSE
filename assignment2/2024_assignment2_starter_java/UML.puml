@startuml
!define RECTANGLE class
!define INTERFACE interface
!define ABSTRACT abstract class

INTERFACE Observer {
  +update(bike: Bike, state: String): void
}

INTERFACE TransitionObserver {
  +onTransition(bike: Bike, fromState: String, toState: String): void
}

RECTANGLE Bike {
  -BikeState state
  -boolean transitionedFromInServiceToReady
  -List<Observer> stateObservers
  -List<TransitionObserver> transitionObservers
  +Bike()
  +addObserver(observer: Observer): void
  +addTransitionObserver(observer: TransitionObserver): void
  +setState(newState: BikeState): void
  +notifyStateObservers(): void
  +notifyTransitionObservers(fromState: String, toState: String): void
  +hasTransitionedFromInServiceToReady(): boolean
  +resetTransitionFlag(): void
}

RECTANGLE EmptyState {
  +handle(bike: Bike): void
}

RECTANGLE InServiceState {
  +handle(bike: Bike): void
}

RECTANGLE ReadyState {
  +handle(bike: Bike): void
}

RECTANGLE PickUpState {
  +handle(bike: Bike): void
}

RECTANGLE BikeObserver {
  +update(bike: Bike, state: String): void
  -handleEmpty(bike: Bike): void
  -handleAvailable(bike: Bike): void
  -handleInService(bike: Bike): void
  -handleReady(bike: Bike): void
}

RECTANGLE InServiceToReadyObserver {
  +onTransition(bike: Bike, fromState: String, toState: String): void
  -handleInServiceToReady(bike: Bike): void
}

RECTANGLE App {
  +main(String[] args): void
}

RECTANGLE BikeController {
  +BikeShop bikeShop
  +void addBike(Bike bike)
  +void removeBike(Bike bike)
}

RECTANGLE BikeShop {
  +List<Bike> bikes
  +void notifyObservers()
}

RECTANGLE BikeShopInput {
  +BikeShop bikeShop
  +void processInput(String input)
}

RECTANGLE FinanceManager {
  +BikeShop bikeShop
  +void updateFinance(Bike bike)
}

RECTANGLE StateManager {
  +Bike bike
  +void updateState(String newState)
}

RECTANGLE StatisticManager {
  +BikeShop bikeShop
  +void generateStatistics()
}

RECTANGLE StatisticTypes {
  +void calculateStatistics()
}

RECTANGLE FullInventoryError {
  +String message
}

RECTANGLE KeyWordObserver {
  +void notify(String message)
}

RECTANGLE NewMessage {
  +String message
}

RECTANGLE BikeInventory {
  +List<Bike> bikes
  +void updateInventory(Bike bike)
}

Bike -> Observer : observers *
Bike -> TransitionObserver : transitionObservers *
Bike -> BikeState : state
BikeState <|-- EmptyState
BikeState <|-- InServiceState
BikeState <|-- ReadyState
BikeState <|-- PickUpState
Observer <|-- BikeObserver
TransitionObserver <|-- InServiceToReadyObserver

App --> BikeShop
BikeShop --> Bike
BikeShop --> BikeController
BikeShop --> BikeShopInput
BikeShop --> FinanceManager
BikeShop --> StateManager
BikeShop --> StatisticManager
StatisticManager --> StatisticTypes
BikeShop --> FullInventoryError
BikeShop --> BikeInventory
BikeShop --> TransitionObserver
KeyWordObserver --> NewMessage

@enduml
